package ru.stqa.pft.addreddbook.tests;// Generated by Selenium IDE


import org.hamcrest.CoreMatchers;
import org.hamcrest.MatcherAssert;
import org.junit.Assert;
import org.junit.Test;
import ru.stqa.pft.addreddbook.model.GroupData;
import ru.stqa.pft.addreddbook.model.Groups;

import java.util.Comparator;
import java.util.List;
import java.util.Set;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.MatcherAssert.assertThat;


public class GroupCreationTest extends TestBase {

    @Test
    public void testGroupCreate() {
        app.goTo().groupPage("GROUPS");
        // int before = app.getGroupHelper().getGroupCount(); - cчитает просто количество элементов групп
        Groups before = app.group().all();  // считаем размер списка групп
        // app.getGroupHelper().createGroup(new GroupData ("zzz", null, null)); - один из вариантов создания группы, через отдельный метод
        GroupData group = new GroupData().withName("test");
        app.group().create(group);
        Groups after = app.group().all();
        //Assert.assertEquals(after.size(),before.size() + 1);
        assertThat(after.size(), equalTo(before.size() + 1));

        //group.withId(after.stream().mapToInt((g) -> g.getId()).max().getAsInt());
      //  before.add(group);
        //Assert.assertEquals(before,after);
        assertThat(after, equalTo
                (before.withAdded(group.withId(after.stream().mapToInt((g) -> g.getId()).max().getAsInt()))));  // проверялка

      /*  int max = 0;
        for (GroupData g: after){
            if (g.getId() > max){
                max = g.getId();
            }
        }

        //int max1 = after.stream().max( (o1, o2) -> Integer.compare(o1.getId(), o2.getId())).get().getId(); // лямбда выражение, вычисление макс индетификатора
      //  group.setId(after.stream().max( (o1, o2) -> Integer.compare(o1.getId(), o2.getId())).get().getId());
       /* before.add(group);
       /* Comparator<? super GroupData> byId = (g1, g2) -> Integer.compare(g1.getId(), g2.getId());
        before.sort(byId);
        after.sort(byId);
        //Assert.assertEquals(new HashSet<Object>(before),new HashSet<Object>(after));
        Assert.assertEquals(before,after);*/
    }

    @Test
    public void testBadGroupCreate() {
        app.goTo().groupPage("GROUPS");// int before = app.getGroupHelper().getGroupCount(); - cчитает просто количество элементов групп
        Groups before = app.group().all();  // считаем размер списка групп
        GroupData group = new GroupData().withName("test3'");
        app.group().create(group);
        assertThat(app.group().getGroupCount(), equalTo(before.size())); // здесь хэшируем проверку, т.е.предварительная проверка при помощи более быстрой операции
        Groups after = app.group().all();
        assertThat(after, equalTo(before));  // проверялка
    }
}
